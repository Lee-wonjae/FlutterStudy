1. 상태관리
State 클래스 내부에서 setState를 활용한 상태관리는 간단한 프로젝트에서 효율적으로 작동합니다.
그러나 Flutter 프레임워크의 위젯 트리 구조 특성상, 데이터를 반복적으로 하위 위젯으로 전달하거나 상위 위젯으로 데이터를 전달해야 하는 경우, 관리가 복잡해질 수 있습니다.
이 문제는 글로벌 상태관리를 활용하여 해결할 수 있습니다.

글로벌 상태관리를 제공하는 대표적인 패키지로는 BloC, GetX, Riverpod, Provider 등이 있습니다.
각 패키지는 사용 사례와 프로젝트의 복잡도에 따라 장단점이 있습니다.
예를 들어:

BloC는 명확한 상태 흐름과 테스트 가능성을 중시하는 복잡한 앱에 적합합니다.
GetX는 간단한 문법과 빠른 개발 속도를 중시합니다.
Riverpod는 더 간결하고 효율적인 상태 관리를 제공합니다.
Provider는 Flutter 팀이 권장하며 기본적인 상태 관리를 위한 기능을 제공합니다.

2. cache and positive response
예시 Get 과정
ui에서 날짜 선택을 했다. 그러면 비지니스 로직은 changeSelectedDate()을 프로바이더에서 실행한다.
그러면 비지니스 로직의 notifyListeners()를 프로바이더에서 실행한다.
이 notifyListeners()는 빌드를 해준다. 그럼 ui가 업데이트 된다.
근데 이때 해당되는 날짜에 한번도 get메서드를 통한 데이터를 가져온적이 없다면,provider에서 getSchedules()를 실행한다.
그럼 schedules Repository에서 getSchedules()를 실행한다.
그후 캐시를 업데이트하고 다시
notifyListeners()를 통해 ui를 업데이트 한다.

예시 post 과정
ui에서 밀어서 스케줄을 삭제한다. 비지니스 로직은 deleteSchedule()를 프로바이더에서 실행한다.
그럼 캐시를 임의로 업데이트한다. 어차피 캐시를 보여줄거고 서버(db)에는 거의 잘 들어가니까.
캐시를 업데이트하면 notifyListeners()를 프로바이더에서 실행한다. 그럼 ui가 업데이트 된다.
그리고 ScheduleRepositoy의 getSchedule()이 실행된다.
이 요청이 성공적이라면 post과정을 끝이난다.
하지만 오류가 발생했다면, 캐시를 원상복구한다.
그리고 notifyListeners()로 ui를 업데이트한다.